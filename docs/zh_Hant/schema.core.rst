.. _core:

標準(核心)
===================

本文件說明 ``publiccode.yml`` 的規範。

Top-Level 鍵與段落
---------------------------

鍵 ``publiccodeYmlVersion``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  類型： string
-  是否必要：必要
-  範例： ``"0.1"``

此鍵代表目前 ``publiccode.yml`` 採用的軟體版本，方便判斷與舊系統的相容性。

鍵 ``name``
~~~~~~~~~~~~

-  類型： string
-  是否必要：必要
-  範例： ``"Medusa"``

此鍵包含軟體名稱，以及產品的公開名稱(短名)，該名稱可在特定國家 localisation 程式碼段落中本地化，並以最多人熟知的名稱為主。若軟體有公司內部用的代號跟對外販售的名稱，則以對外販售的名稱為主。

鍵 ``applicationSuite``
~~~~~~~~~~~~~~~~~~~~~~~~

-  類型： string
-  是否必要：非必要
-  範例： ``"MegaProductivitySuite"``

此鍵包含收錄軟體的軟體套裝名稱。

鍵 ``url``
~~~~~~~~~~~

-  類型： string (URL)
-  是否必要：必要
-  範例： ``"https://example.com/italia/medusa.git"``

該軟體特有的識別符號。此字串必須是當初軟體發佈時，所在的原始碼儲存庫(git, svn, ...)連結。如果儲存庫採用多種協定，請以不需要使用者認證的HTTP/HTTPS連結為主。

為了貢獻給上流軟體所建立的分支，不應該修改此檔案。這將有助於軟體分析 ``publiccode.yml``，立即跳過技術分支。反過來說，完整且應該與原始軟體獨立分開的分支，則應修改此段程式碼，才能取得不同專案的狀態。

See :ref:`forks-and-variants` for a complete description of what
is a software variant and how to handle forked software as a parser or
an author.

請參閱 :ref:`forks-and-variants`，當中完整定義軟體變種，以及如何以分析人員或作者身份來處理分支軟體。

鍵 ``landingURL``
~~~~~~~~~~~~~~~~~~

-  類型： string (URL)
-  是否必要：非必要
-  範例： ``"https://example.com/italia/medusa"``

若 ``url`` 參數無法產生人類可讀或瀏覽的頁面，而只能提供原始碼給原始碼控制客戶端 。只要有鍵，您就能夠指定到達網頁。在理想狀況下，您的用戶在按下網站上類似「查看應用程式原始碼」的按鈕時，就會前往該網頁。如果產品提供自動化圖形介面安裝程式，此連結能夠連結一個提到原始碼但同時允許使用者下載安裝程式的網頁。

鍵 ``isBasedOn``
~~~~~~~~~~~~~~~~~

-  類型： string or各種string
-  是否必要：非必要
-  範例： ``"https://github.com/italia/otello.git"``

若本軟體為可能包含 ``publiccode.yml`` 檔案的軟體)的分支或變種，本鍵將包含原始專案的 ``url``。

本鍵能判斷分支為來自特定儲存庫的軟體變種。

鍵 ``softwareVersion``
~~~~~~~~~~~~~~~~~~~~~~~

-  類型： string
-  是否必要：非必要
-  範例： ``"1.0"``, ``"dev"``

本鍵包含軟體的最新且穩定的版本編號。版本編號是一個字串，不應該被解讀或分析，只應該被顯示出來。分析人員不應該認定版本編號有任何語意化命名方式或其他特定版本格式。

若軟體尚在初始開發階段，且還沒有發佈，則可忽略此鍵。

鍵 ``releaseDate``
~~~~~~~~~~~~~~~~~~~

-  類型： string (date)
-  是否必要：必要
-  範例： ``"2017-04-15"``

本鍵包含最新軟體版本發佈時的日期。如果軟體已經被發佈過至少一次，因此有版本編號時，則必須要用此鍵標示該日期。

鍵 ``logo``
~~~~~~~~~~~~

-  類型： string (relative path to file or absolute URL)
-  是否必要：非必要
-  可接受格式： SVG, SVGZ, PNG
-  範例： ``"img/logo.svg"``

本鍵包含連結至軟體標誌的路徑。軟體標誌應該採用向量圖形格式，點陣圖版本只能當作備份。在此情況下，軟體標誌應該採用透明PNG圖，最低寬度為1000px。鍵值可以是從儲存庫根目錄前往該檔案的相對路徑，也可以是連結至標誌原始檔的連結。無論如何，標誌的檔案都必須存放在 ``publiccode.yml`` 檔案所在的同一個儲存庫。

鍵 ``monochromeLogo`` (*deprecated*)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  類型： string (path to file)
-  是否必要：非必要
-  可接受格式： SVG, SVGZ, PNG
-  範例： ``"img/logo-mono.svg"``

單色(黑色)標誌。標誌應該採用向量圖形格式，點陣圖版本只能當作備份。在此情況下，軟體標誌應該採用透明PNG圖，最低寬度為1000px。鍵值可以是從儲存庫根目錄前往該檔案的相對路徑，也可以是連結至標誌原始檔的連結。無論如何，標誌的檔案都必須存放在 ``publiccode.yml`` 檔案所在的同一個儲存庫。

鍵 ``inputTypes`` (*deprecated*)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  類型： 各種列舉的string
-  是否必要：非必要
-  值：遵循RFC 6838
-  範例： ``"text/plain"``

`RFC 6838 <https://tools.ietf.org/html/rfc6838>`_ 規定的媒體類型(MIME類型)，可被應用程式視為輸入來源。

若軟體不支援任何輸入功能，您可以跳過此欄位或使用 ``application/x.empty``。

鍵 ``outputTypes`` (*deprecated*)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-  類型： 各種列舉的string
-  是否必要：非必要
-  值：遵循RFC 6838
-  範例： ``"text/plain"``

`RFC 6838 <https://tools.ietf.org/html/rfc6838>`_ 規定的媒體類型(MIME類型)，可被應用程式視為輸出來源。

若軟體不支援任何輸出功能，您可以跳過此欄位或使用 ``application/x.empty``。

鍵 ``platforms``
~~~~~~~~~~~~~~~~~

-  類型： enumerated string or各種string
-  是否必要：必要
-  值： ``web``, ``windows``, ``mac``, ``linux``, ``ios``,
   ``android``。可使用不在本列表上但人類可讀的值。
-  範例： ``web``

本鍵指明軟體運行的平台。本鍵是描述使用者為了使用該軟體而必須使用的平台，而非軟體本身運作時所在的平台。

若可以，請以預定義值優先。如果軟體執行的平台沒有預定義值，則可使用不同的值。

鍵 ``categories``
~~~~~~~~~~~~~~~~~~

-  類型：各種string
-  是否必要：必要
-  可接受值：請參閱 :ref:`categories-list` 

能用於描述軟體並協助建立開源軟體目錄的字表。

受控字彙 :ref:`categories-list` 包含允許值列表。

鍵 ``usedBy``
~~~~~~~~~~~~~~

-  類型：各種string
-  是否必要：非必要

軟體維護人員知道有在使用軟體的主要公共行政機關名單(可視為推薦軟體的使用者)。

語法分析器也可將獨立取得的其他資訊加入該列表中。舉例來說，有行政管理機關擁有該軟體的分支，也可視為該軟體的用戶。

鍵 ``roadmap``
~~~~~~~~~~~~~~~

-  類型： string
-  是否必要：非必要

軟體公共路徑圖連結。

鍵 ``developmentStatus``
~~~~~~~~~~~~~~~~~~~~~~~~~

-  類型： enumerated string
-  是否必要：必要
-  Allowed values: ``concept``, ``development``, ``beta``, ``stable``,
   ``obsolete``

這些鍵包括：

-  ``concept`` - 軟體只是一個「概念」，目前沒有編寫任何程式碼，儲存庫也只是預留位置。
-  ``development`` - 已經為開發該軟體投注了心力，但是程式碼還不到能讓終端使用者使用的階段，甚至無法推出預覽或測試版本供終端使用者測試。
-  ``beta`` - 軟體正在進行測試的階段(預覽或測試版)。在這個階段，軟體可能已經也可能尚未有公開發行。
-  ``stable`` - 軟體已經公開發佈，並且準備好用於生產環境中。
-  ``obsolete`` - 軟體已經停止維護或更新。所有原始碼都已經封存為歷史紀錄檔案。

鍵 ``softwareType``
~~~~~~~~~~~~~~~~~~~~

-  類型： enumerated string
-  是否必要：必要
-  Allowed values: ``"standalone/mobile"``, ``"standalone/iot"``,
   ``"standalone/desktop"``, ``"standalone/web"``, ``"standalone/backend"``,
   ``"standalone/other"``, ``"addon"``, ``"library"``, ``"configurationFiles"``

這些鍵包括：

-  ``standalone/mobile`` - 軟體為單機獨立軟體。軟體為原生行動應用程式。
-  ``standalone/iot`` - 軟體適合物聯網情境。
-  ``standalone/desktop`` - 軟體通常安裝在桌上型電腦作業系統環境中執行。
-  ``standalone/web`` - 軟體代表可透過瀏覽器使用的網路應用程式。
-  ``standalone/backend`` - 軟體為後端應用程式。
-  ``standalone/other`` - 軟體性質與前一個不同。
-  ``softwareAddon`` - 軟體屬於更複雜的軟體(例如CMW或辦公室套裝軟體)的附加軟體，像是插件或主題。
-  ``library`` - 軟體包含函式庫或是SDK，讓第三方開發人員更容易設計新產品。
-  ``configurationFiles`` - 軟體沒有可執行的文本，只有一組配置檔案。這些檔案可能紀錄特定部署方式。這樣檔案可能是簡單的配置檔案、bash scripts、sensible playbooks、Dockerfiles或其他指令集。

``intendedAudience`` 段落
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

鍵 ``intendedAudience/countries``
''''''''''''''''''''''''''''''''''

-  類型：各種string
-  是否必要：非必要

本鍵明確地將某些國家列入其目標受眾。換句話說，該軟體明確表示遵守特定流程、科技或法律。所有國家都以ISO3166-1二位字母代碼表示。

鍵 ``intendedAudience/unsupportedCountries``
'''''''''''''''''''''''''''''''''''''''''''''

-  類型：各種string
-  是否必要：非必要

本鍵明確標示不支援的國家。原因可能是因為該軟體運作方式，與該國特定法規、流程或科技有所衝突。所有國家都以ISO3166-1二位字母代碼表示。

鍵 ``intendedAudience/scope``
''''''''''''''''''''''''''''''

-  類型：各種string
-  是否必要：非必要
-  可接受值：請參閱 :ref:`scope-list` 

本鍵包含與軟體應用領域相關的標籤列表。

``description`` 段落
~~~~~~~~~~~~~~~~~~~~~~~

本段落包含對軟體的一般描述。語法分析器可使用本段落來製作描述該軟體的網頁。

**請注意：**由於本段落包含的所有string，都是使用者可見且採用特定語言，您**必須**新增一個小節並在當中指明您編輯文字所採取的語言(使用IETF `BCP 47 <https://tools.ietf.org/html/bcp47>`_ specifications)，該小節的名稱就是您所用的語言。依據BCP 47的規定，主要語言子標籤不可以刪除。

以英文為例：

.. code:: yaml 

   description:
     en:
       shortDescription: ...
       longDescription: ...

在之後的章節，所有鍵都假定位於以語言為名的小節中(以 ``[lang]`` 表示)。

**請注意：**本段落中*至少*要有一個語言，其他語言為選擇性。

鍵 ``description/[lang]/localisedName``
''''''''''''''''''''''''''''''''''''''''

-  類型： string
-  是否必要：非必要
-  範例： ``"Medusa"``

本鍵代表將名稱翻譯成特定語言的機會。當中包含產品的公開名稱與短名，這名稱也應該是多數消費者稱呼該軟體的名字。若該軟體有公司內部的代號以及上市的名稱，請以上市名稱為主。

鍵 ``description/[lang]/genericName`` (*deprecated*)
'''''''''''''''''''''''''''''''''''''''''''''''''''''

-  類型：string (最多35個字符)
-  是否必要：非必要
-  範例： ``"Text Editor"``

本鍵為「通用名稱」，也就是軟體所屬的特定類別。您通常可在軟體的簡報發表會上看到軟體的通用名稱，通常都會看到「xxx軟體是yyy」。比較常見的範例包括"文字編輯器"、"文書處理器"、"網路瀏覽器"與"聊天室"等。通用名稱最多可有35個字符。

鍵 ``description/[lang]/shortDescription``
'''''''''''''''''''''''''''''''''''''''''''

-  類型： string(最多150個字符)
-  是否必要：必要
-  範例： ``"Advanced booking system for hospitals"``

本鍵包含對軟體的簡短描述，內容應該是包含一句話的一行程式碼，上限為150個字符。

鍵 ``description/[lang]/longDescription``
''''''''''''''''''''''''''''''''''''''''''

-  類型： string(最少150個字符，最多10000個字符)
-  是否必要：必要 (至少對一個語言來說)

本鍵包含對軟體較長的描述，長度介於150與10,000個字符之間。本鍵旨在為潛在用戶提供軟體功能的概覽。本段文字的受眾應該是軟體用戶，而非開發人員。您可將本段文字視為應該放在軟體官網上(若有)用來描述軟體的文字。

本敘述可包含一些基本的 markdown： ``*italic*``、``**bold**``、項目符號與 ``[links](#)``。

鍵 ``description/[lang]/documentation``
''''''''''''''''''''''''''''''''''''''''

-  類型： URL
-  是否必要：非必要

本鍵提到軟體使用者階層(非開發人員階層)註解。本鍵的值必須是該註解託管版本的連結。

建議該連結是連結到註解的託管版本，如此一來不論是電腦或是行動裝置，都能使用網路瀏覽器立即閱讀該註解。本註解應該以HTML渲染，並且可以跟網站一樣瀏覽(包含頁面導覽、搜尋欄等)。

如果該註解只有文件版，請將文件直接瀏覽/下載連結放在此鍵中。您應該將該文件上傳至原始碼儲存庫中，然後加上該文件的程式碼託管平台連結(像是GitHub連結)。該文件格式請以PDF或ODT等開放格式為主，方便在各種平台上閱讀。

不論註解採取什麼格式，請記得開放其原始檔案的授權，將原始檔案視為儲存庫的一部份。

鍵 ``description/[lang]/apiDocumentation``
'''''''''''''''''''''''''''''''''''''''''''

-  類型： URL
-  是否必要：非必要

本鍵包含對軟體API註解的參照。本鍵的值必須是對託管版本的註解的連結。

建議該連結是連結到註解的託管版本，如此一來不論是電腦或是行動裝置，都能使用網路瀏覽器立即閱讀該註解。本註解應該以HTML渲染，並且可以跟網站一樣瀏覽(包含頁面導覽、搜尋欄等)。如果有參照或是測試部署，可以的話請提供互動式介面(像是Swagger)。

如果該註解只有文件版，請將文件直接瀏覽/下載連結放在此鍵中。您應該將該文件上傳至原始碼儲存庫中，然後加上該文件的程式碼託管平台連結(像是GitHub連結)。該文件格式請以PDF或ODT等開放格式為主，方便在各種平台上閱讀。

不論註解採取什麼格式，請記得開放其原始檔案的授權，將原始檔案視為儲存庫的一部份。

鍵 ``description/[lang]/features``
'''''''''''''''''''''''''''''''''''

-  類型：各種string
-  是否必要：必要 (至少對一個語言來說)

本鍵包含軟體功能列表，描述該軟體能提供的功能。本段文字的受眾應該是委託製作軟體的公共決策者，因此列出來的功能不應該以開發人員為目標，而是應該列出技術功能，像是執行詳細資訊等。請以使用者能看出的軟體功能為主。

雖然本鍵是必要的，但沒有規定本鍵當中應該列出的功能數量上限與下限。

建議您根據軟體大小與複雜程度，列出5至20個功能。沒有必要列出所有功能，因為需要額外資訊的使用者可以自己看註解。

鍵 ``description/[lang]/screenshots``
''''''''''''''''''''''''''''''''''''''

-  類型：各種string (paths)
-  是否必要：非必要
-  Formats: PNG, JPG
-  範例： ``"data/screenshots/configuration.png"``

本鍵包含軟體螢幕截圖檔案的一或多個路徑，這些截圖幫助使用者能迅速瞭解軟體的外觀與功能。鍵值可以是從儲存庫根目錄連結到檔案的相對路徑，也可以是截圖原始版本的絕對URL。不論如何，檔案必須存放在 ``publiccode.yml``檔案所在的同一個儲存庫。

螢幕截圖形狀與尺寸不限，但建議格式為：

-  Desktop: 1280x800 @1x
-  Tablet: 1024x768 @2x
-  Mobile: 375x667 @2x

鍵 ``description/[lang]/videos``
'''''''''''''''''''''''''''''''''

-  類型：各種string (URLs)
-  是否必要：非必要
-  範例： ``"https://youtube.com/xxxxxxxx"``

本鍵包含解釋軟體運作方式的影片的一或多個URL。影片跟螢幕截圖一樣，應該能迅速讓使用者瞭解軟體的外觀與功能。影片必須託管在支援 `oEmbed <https://oembed.com>`_ 標準的影音分享網站，最常見的選項是YouTube與Vimeo。

既然影片是註解不可或缺的內容，建議開放影片的授權。

鍵 ``description/[lang]/awards``
'''''''''''''''''''''''''''''''''

-  類型：各種string
-  是否必要：非必要

軟體獲獎清單。

Section ``legal``
~~~~~~~~~~~~~~~~~

``legal/license`` 段落
''''''''''''''''''''''''

-  類型： string
-  是否必要：必要
-  範例： ``"AGPL-3.0-or-later"``

本字串描述軟體散佈的授權。該字串必須包含有效的SPDX expression，參照一或多個開源授權。詳細資訊請參閱 `SPDX documentation <https://spdx.org/licenses/>`_。

鍵 ``legal/mainCopyrightOwner``
''''''''''''''''''''''''''''''''

-  類型： string
-  是否必要：非必要
-  範例： ``"City of Amsterdam"``

本鍵描述擁有儲存庫當中，「多數」程式碼著作權的實體。通常來說，本鍵是一行具有著作權標誌的文字，且會出現在儲存庫多數檔案的頁首。

您可以在一句英文中列出多個著作權所有人，也可以列出一個社群，像是「Linus Torvalds以及所有Linux貢獻者」。

若無法列出主要的著作權所有人，則可刪除本鍵。在此情況下，若儲存庫有作者檔案，您可以透過 ``legal/authorsFile`` 指向該檔案。

鍵 ``legal/repoOwner``
'''''''''''''''''''''''

-  類型： string
-  是否必要：非必要
-  範例： ``"City of Amsterdam"``

本字串描述擁有本儲存庫的實體，可能是也可能不是程式碼本身的著作權所有人。舉例來說，在原始軟體的分支，``repoOwner`` 跟 ``mainCopyrightOwner`` 可能是不同實體。

鍵 ``legal/authorsFile``
'''''''''''''''''''''''''

-  類型： string (path to file)
-  是否必要：非必要
-  範例： ``"doc/AUTHORS.txt"``

有些開源軟體的做法，是將擁有其著作權的所有實體列在檔案中。這在由社群所支持的專案中相當常見，這些專案有許多外部貢獻者且沒有明確/主要著作權所有人。在此情況下，本鍵可透過儲存庫根目錄的相對路徑，參照作者檔案。

Section ``maintenance``
~~~~~~~~~~~~~~~~~~~~~~~

本段落提供軟體維護狀態資訊，可用來判斷該軟體是否依舊定期維護。

鍵 ``maintenance/type``
''''''''''''''''''''''''

-  類型： enumerate
-  是否必要：必要
-  Values: ``"internal"``, ``"contract"``, ``"community"``, ``"none"``

本鍵描述軟體目前維護方式。

-  ``internal`` - 軟體由儲存庫所有人從內部進行維護;
-  ``contract`` - 有與實體簽約，由該實體負責維護軟體;
-  ``community`` - 軟體由一或多位專案志願者來維護;
-  ``none`` - 軟體由儲存庫所有人從內部進行維護;

鍵 ``maintenance/contractors``
'''''''''''''''''''''''''''''''

-  類型： array of Contractor (see below)
-  是否必要：必要 (if ``maintenance/type`` **is** ``contract``)

本鍵描述目前簽約來維護軟體的實體(若有)，這些實體可以是公司、組織或是其他群體。

鍵 ``maintenance/contacts``
''''''''''''''''''''''''''''

-  類型： 聯絡人列表(見下文)
-  是否必要：必要 (若 ``maintenance/type`` **就是** ``internal`` 或 ``community``)

一或多位聯絡人負責維護本軟體。

本鍵描述目前負責維護軟體的技術人員。所有聯絡人都必須是真人，而非公司或組織。若有人代表一個機構，則必須在聯絡人 ``affiliation`` 註明。

如果是簽署商業協議(或是多份商業協議)，請指明實際簽約來負責維護軟體的實體。除非有參與產品維護，否則請勿指明軟體所有人。

``localisation`` 段落
~~~~~~~~~~~~~~~~~~~~~~~~

本段落提供軟體本地化功能概覽。

鍵 ``localisation/localisationReady``
''''''''''''''''''''''''''''''''''''''

-  類型： boolean
-  是否必要：必要

如果本鍵為 ``true``，代表軟體有多語言的架構或設計，因此不需要提供多語言版本。

鍵 ``localisation/availableLanguages``
'''''''''''''''''''''''''''''''''''''''

-  類型：IETF BCP 47語言標籤列表
-  是否必要：必要
-  範例： ``"it"``, ``"en"``, ``"sl-IT-nedis"``

若有此鍵，代表該軟體的各語言版本列表。該列表至少會有一個語言。根據 `BCP 47 <https://tools.ietf.org/html/bcp47>`_ 規定，不能刪除主要語言子標籤。

``dependsOn`` 段落
~~~~~~~~~~~~~~~~~~~~~

本段落提供安裝與使用本軟體時，所需的系統階層相依性概覽。

**請注意：** 請勿列出原始碼的相依性(例如使用的軟體函式庫)，以安裝與維護軟體所需的執行時期和/或系統階層相依性為主。舉例來說，資料庫就是很好的相依性範例。

鍵 ``dependsOn/open``
''''''''''''''''''''''

-  類型： 各種 ``dependency`` (見下文)
-  是否必要：非必要

本鍵包含使用開源軟體授權發佈的執行時期相依性列表。

鍵 ``dependsOn/proprietary``
'''''''''''''''''''''''''''''

-  類型： 各種 ``dependency`` (見下文)
-  是否必要：非必要

本鍵包含使用私有軟體授權發佈的執行時期相依性列表。

鍵 ``dependsOn/hardware``
''''''''''''''''''''''''''

-  類型： 各種 ``dependency`` (見下文)
-  是否必要：非必要

本鍵包含使用軟體所需要的硬體相依性列表。

特別資料格式
--------------------

相依性
~~~~~~~~~~

``dependency`` 是複雜的主題，並且具有以下屬性：

-  ``name`` - **必要** - 相依性名稱(例如MySQL、NFC Reader)
-  ``versionMin`` - 第一個相容版本
-  ``versionMax`` - 最新相容版本
-  ``version`` - 軟體相容的唯一主要版本，並且能相容之後推出的所有修復與除錯更新。
-  ``optional`` - 相依性是否必要

複雜的版本控制
~~~~~~~~~~~~~~~~~~

也可以使用其他鍵來指明複雜的相容性矩陣。

*Ex. 1*

.. code:: yaml

   - name: PostgreSQL
     version: "3.2"
     optional: true

這一段程式碼標示PostgreSQL 3.2版的選擇性相依性。

*Ex. 2*

.. code:: yaml

   - name: MySQL
     versionMin: "1.1"
     versionMax: "1.3"

這一段程式碼標示MySQL的必要相依性，可使用1.1至1.3之間的版本。

聯絡人
~~~~~~~

聯絡人具有以下屬性：

-  ``name`` - **必要** - 本鍵包含技術聯絡人之一的全名。技術連絡人必須是真人，所以請勿將一般聯絡人資訊、公司部門或協會等資訊填入此鍵中。
-  ``email`` - 本鍵包含技術連絡人的電子郵件信箱，必須是能直接聯繫上該技術聯絡人的電子郵件信箱。請勿輸入 "info@acme.inc" 這樣的一般郵寄名單。電子郵件信箱必須清楚無誤。為了進一步預防電子郵件資料收集，請依照YAML規範，以 ``\x64`` 取代 ``@``。
-  ``phone`` - 電話號碼(包含國際冠碼)。必須採用string 格式。
-  ``affiliation`` - 本鍵包含技術聯絡人的聯絡資訊。有多位維護人員時，可使用本鍵在每位技術聯絡人與維護人員之間建立關聯性。本鍵能包含公司名與機構名稱等。

承包商
~~~~~~~~~~

承包商具有以下屬性：

-  ``name`` - **必要** - 承包商姓名，可以是公司或是本人。
-  ``until`` - **必要** - 這是日期(YYYY-MM-DD)。本鍵必須包含維護結束的日期。如果是由社群進行維護，本鍵的值不應該超過未來2年。因此隨著社群持續改善專案，也必須定期更新本鍵的值。
-  ``email`` - 本鍵包含技術連絡人的電子郵件信箱，必須是能直接聯繫上該技術聯絡人的電子郵件信箱。請勿輸入 "info@acme.inc" 這樣的一般郵寄名單。電子郵件信箱必須清楚無誤。為了進一步預防電子郵件資料收集，請依照YAML規範，以 ``\x64`` 取代 ``@``。
-  ``website`` - 本鍵指向維護人員網站，可以是該公司官網，或是與專案相關的網頁或網站。

日期
~~~~~

``publiccode.yml`` 當中所有日期都必須採用"YYYY-MM-DD"格式，這也是ISO8601允許的格式之一。該格式是唯一允許的格式，所以並非所有ISO8601允許的格式都適用於日期鍵。

編碼
~~~~~~~~

`publiccode.yml` **必須**採用UTF-8編碼，且**應該**採用YAML 1.2文件格式，因為YAML 1.1格式*已棄用*。
